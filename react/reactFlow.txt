for index.js
react makes its own dom (virtual dom) and compare it with the web dom
power of jsx:we can render html elements through js
in index.js:
    raect.strictmode is for development process we can render app without it also
purpose of rendering:we can write html through js :
    benefit:now we have programming capabilities in html
this index.js is loaded into index.html using react-scripts(which can be seen in package.json)
when working in viteReact project:
    we have to make .jsx file if we want to export our own function
    and If you mean to render a React component, start its name with an uppercase letter.
we can return only one thing in the return funvtion of app.jsx so we wrap all our functionalities in   <> </>(fragment)


creating own react project:
function custonRender(reactElemnet, container) {
    here we have to set each attribute seperately
  const domElement=document.createElement(reactElemnet.type)
    domElement.innerHTML=reactElemnet.children
    domElement.setAttribute('href',reactElemnet.props.href)
    domElement.setAttribute('target',reactElemnet.props.target)

    container.appendChild(domElement)

  now  so we will use loop to set attributes
   note:this is the syntax equivalent to what we write in jsx file in div
   this code is telling behind the scenes of what is happening in jsx file 
   and the code is shorter in jsx as it has js+html mixed so easier to write
   
  const domElement = document.createElement(reactElemnet.type);
  domElement.innerHTML = reactElemnet.children;
  for (const prop in reactElemnet.props) {
    if (prop === "children") continue;

    domElement.setAttribute(prop, reactElemnet.props[prop]);
  }
  container.appendChild(domElement);
}

this code will not work in our viteproject mainContainer.jsx as here we are making our own props and syntax but in main.jsx it is expecting its own tailored syntax

HOOKS:
  help in ui updation as react has its own way we can't use classic js references in this like gtelmemtbyid or etc
  each hook has its specific task

VIRTUAL DOM,FIBRE AND RECONCILLATION
  read the github article by 'acdlite'

TAILWIND AND PROPS
  props makes the components reusable

BASIC HOOK IN REACT:
  in our hooksInProject we are making a project in which we are generating a random password . we can set its length and also enable whether to add numbers or special characters in it
hook1: useCallback
  it lets you cache a function definition b/w re-renders
  syntax: useCallback(function,dependencies)
  dependencies is an array where we pass our state variables