for index.js
react makes its own dom (virtual dom) and compare it with the web dom
power of jsx:we can render html elements through js
in index.js:
    raect.strictmode is for development process we can render app without it also
purpose of rendering:we can write html through js :
    benefit:now we have programming capabilities in html
this index.js is loaded into index.html using react-scripts(which can be seen in package.json)
when working in viteReact project:
    we have to make .jsx file if we want to export our own function
    and If you mean to render a React component, start its name with an uppercase letter.
we can return only one thing in the return funvtion of app.jsx so we wrap all our functionalities in   <> </>(fragment)


creating own react project:
function custonRender(reactElemnet, container) {
    here we have to set each attribute seperately
  const domElement=document.createElement(reactElemnet.type)
    domElement.innerHTML=reactElemnet.children
    domElement.setAttribute('href',reactElemnet.props.href)
    domElement.setAttribute('target',reactElemnet.props.target)

    container.appendChild(domElement)

  now  so we will use loop to set attributes
   note:this is the syntax equivalent to what we write in jsx file in div
   this code is telling behind the scenes of what is happening in jsx file 
   and the code is shorter in jsx as it has js+html mixed so easier to write
   
  const domElement = document.createElement(reactElemnet.type);
  domElement.innerHTML = reactElemnet.children;
  for (const prop in reactElemnet.props) {
    if (prop === "children") continue;

    domElement.setAttribute(prop, reactElemnet.props[prop]);
  }
  container.appendChild(domElement);
}

this code will not work in our viteproject mainContainer.jsx as here we are making our own props and syntax but in main.jsx it is expecting its own tailored syntax

HOOKS:
  help in ui updation as react has its own way we can't use classic js references in this like gtelmemtbyid or etc
  each hook has its specific task

VIRTUAL DOM,FIBRE AND RECONCILLATION
  read the github article by 'acdlite'

TAILWIND AND PROPS
  props makes the components reusable

BASIC HOOK IN REACT:
  in our hooksInProject we are making a project in which we are generating a random password . we can set its length and also enable whether to add numbers or special characters in it
hook1: useCallback
  it lets you cache a function definition b/w re-renders
  syntax: useCallback(function,dependencies)
  dependencies is an array where we pass our state variables
hook2: useEffect
  lets you synchronize a component with an external system
  syntax: useEffect(callback function,dependencies array)
hook3: useRef
  used when we need to get reference of anything

CUSTOM HOOKS:
  In this video we'll learn about custom hooks. how to create custom hooks how to use them along with that we'll look  how to make api call and will discuss about optimization techniques and how to create reusable component. 
  While creating hook make sure you are using .js extension because they don't return jsx they are js functions and you should follow the standard approach for creating hook that is hook should be started from use word.

currencyConverter project:
  in this we are using custom hook and we are learning about function reusability
  hook4: useId
    used for generating unique ids that can be passed to accessibility attributes
    NOTE:do not use useId to generate keys in a list. it should be generated from your data

REACT-ROUTER PROJECT:
  link is used in place of a tag(a is not used as page gets refreshed with it)
  structure: to in place of href
  navlink classes is written in callback and in backtics we use flags like isactive or ispending
  Layout/root functionalities:
    we gave an outlet and did nesting in router
  router functionalities:
    nesting done by giving layout in top level and then storing various components in outlet
    to create router we only need RouterProvider(like a wrapper) then use createBrowserRouter followed by createRoutesFromElements
    useParams is a hook in react-router-dom used to access values in a component
  API calls handling:
    use loader and make an export element fetching api data . then pass that component in the loader

CONTEXT API:
  we make a global file or const containing our data and when any card needs it it can take data from there rather than passing it on various components (like div in div )
  redux is a variale of context api that helps in state management
  react-redux , redux-toolkit(RTK) are also some libraries
  useContext hook

context API with local storage:
  project:todolist manager

IMP: STEPS FOR MAKING CONTEXT API PROJECT
  step1-> we handle context folder and make our main context file(.js). we use createContext and useContext and export a const using .provider form
  step2-> in app.jsx we import the contextprovider and the functions that we havr to use are just initialised in context file but their actual definitions(what they will do) is written here
  step3-> we make the components folder and design the componenrts. we set its states using useState and useEffect to call the functions that we made in app.jsx

REDUX TOOLKIT:
  till now, we are making our components functional and exporting it but we can also use classes in it
note: skippable topics->class based components , basic redux
  redux is an independent library and to connect it with react we use react-redux
  redux-toolkit has internally made middleware
main topics/process
  store: use configureStore and it takes object as a parameter
  reducers/slices: use createSlice ,nonaoid(generate unique ids)
  useSelector
  useDispatch: it uses reducers to change values in store using action.payload(we don't have to write extra code just pass the value)